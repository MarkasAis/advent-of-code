// let data = [
//     [[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],
//     [7,[[[3,7],[4,3]],[[6,3],[8,8]]]],
//     [[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]],
//     [[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]],
//     [7,[5,[[3,8],[1,4]]]],
//     [[2,[2,2]],[8,[8,1]]],
//     [2,9],
//     [1,[[[9,3],9],[[9,0],[0,7]]]],
//     [[[5,[7,4]],7],1],
//     [[[[4,2],2],6],[8,7]]
// ]

let data = [
    [[[7,1],2],3],
    [[1,7],7],
    [[6,8],[[6,[3,6]],[0,5]]],
    [[[[2,1],8],[[9,4],8]],[[6,5],4]],
    [[1,[[3,8],[9,1]]],[[9,1],[[1,7],0]]],
    [[[7,4],[8,[7,6]]],[9,[[6,3],[7,8]]]],
    [[[[5,0],1],4],[[5,[6,9]],[[4,3],2]]],
    [[[3,8],8],[[[3,2],8],[9,[0,5]]]],
    [[[[5,8],[3,9]],[7,[1,4]]],[6,1]],
    [3,[[[3,3],9],[0,7]]],
    [[[6,9],1],[[0,[8,4]],[[2,2],9]]],
    [[[[6,2],3],[0,4]],3],
    [[[[3,8],7],[[7,4],0]],[2,[5,[2,8]]]],
    [[4,[9,[8,0]]],[[1,5],[[9,3],8]]],
    [[[8,5],[3,[1,4]]],[[6,[8,0]],[[2,7],[2,6]]]],
    [4,7],
    [[[[2,3],0],[[1,9],[4,1]]],[[1,[4,2]],3]],
    [[[8,[5,3]],[[5,7],7]],[[5,6],[6,4]]],
    [[[[2,4],1],[8,6]],[[6,5],[0,[9,1]]]],
    [[[1,[5,7]],8],[[[9,1],9],[[1,2],4]]],
    [[[[5,5],[4,0]],[4,[9,6]]],[[[2,1],1],7]],
    [[[[1,9],[9,5]],[[5,0],[3,1]]],[[[6,7],[8,8]],[[7,3],0]]],
    [[6,[[6,7],[9,0]]],[[7,7],[[0,3],0]]],
    [[0,6],[5,2]],
    [[[[5,8],3],[[9,0],8]],[7,4]],
    [[0,[[9,9],[9,4]]],[[[1,1],2],[1,[6,7]]]],
    [0,[[5,7],2]],
    [[2,[[5,4],6]],[1,[8,[7,6]]]],
    [[[1,7],[8,[5,8]]],[[[2,1],[9,1]],[[5,6],9]]],
    [[1,8],[9,[4,3]]],
    [5,[2,[[5,5],9]]],
    [3,[8,[[2,8],[4,8]]]],
    [[[4,9],[[5,5],0]],[9,[8,[3,0]]]],
    [[[2,[6,4]],[8,[9,9]]],[[[0,4],8],[3,[9,7]]]],
    [[[[8,1],[2,4]],3],[1,[[3,3],[6,3]]]],
    [[[8,[7,3]],[1,8]],2],
    [[8,[8,4]],[[6,[4,7]],[3,0]]],
    [[[[4,6],[8,3]],9],[9,[[8,9],[0,9]]]],
    [[3,[[2,7],[4,4]]],2],
    [8,[[[8,6],2],[[8,9],6]]],
    [[[[5,7],[2,0]],[[0,2],[5,5]]],[[[8,5],5],[[1,3],[2,3]]]],
    [[1,6],[[9,8],[9,[4,9]]]],
    [[[[1,4],5],9],[4,[6,8]]],
    [[[[6,4],[9,0]],[[1,4],[6,6]]],[[9,[2,8]],2]],
    [[[[5,9],2],[[0,0],5]],[2,1]],
    [6,[[3,2],[[3,0],0]]],
    [[[[7,4],1],[[4,1],1]],[[3,4],4]],
    [3,[9,[9,7]]],
    [[[3,[3,3]],[0,3]],[1,[1,8]]],
    [[8,[8,7]],[[9,2],5]],
    [[[1,[3,9]],[5,9]],[1,5]],
    [[[[7,8],[9,7]],9],[[[9,2],[2,2]],[[9,6],8]]],
    [4,[[3,5],[[1,3],[5,5]]]],
    [7,[[[0,1],2],[[3,6],5]]],
    [0,[[[2,4],[3,4]],[8,9]]],
    [[1,[[6,8],1]],[8,0]],
    [1,1],
    [7,0],
    [[1,2],[[0,[8,3]],[[4,5],[9,7]]]],
    [[[[2,3],[5,9]],[7,[1,9]]],2],
    [[3,5],[[9,7],9]],
    [[[[6,9],[4,8]],6],0],
    [[[[2,4],[3,9]],[2,[9,4]]],[[[8,9],[3,1]],7]],
    [[5,[[0,2],4]],[[[9,9],[7,4]],[1,5]]],
    [3,[6,[[5,4],1]]],
    [[[2,[2,7]],2],[[4,[7,3]],5]],
    [7,[[0,[2,0]],[[9,4],6]]],
    [[4,[3,[6,2]]],9],
    [[[0,[5,6]],[8,3]],[[7,9],[0,[9,6]]]],
    [8,[[6,4],[4,8]]],
    [[[8,[6,8]],[5,[7,3]]],[[[7,8],5],2]],
    [[[[3,5],[4,7]],5],[[0,0],[9,[1,9]]]],
    [[7,[[1,5],9]],[[[3,4],[1,7]],[1,[7,9]]]],
    [[0,[3,[4,1]]],[[[2,9],3],[4,[0,8]]]],
    [[[8,[1,6]],[[0,1],7]],[[[1,1],[0,2]],[[9,4],[9,6]]]],
    [[[[6,7],0],[[6,8],9]],[[1,[6,6]],[[2,9],[4,7]]]],
    [[[[5,0],[1,2]],[1,[5,1]]],[[0,4],1]],
    [[9,1],6],
    [[7,2],[[[5,5],[4,3]],6]],
    [[9,[[0,6],9]],[[7,9],[7,1]]],
    [[[[7,3],[6,4]],[[2,5],[7,2]]],[[[4,4],0],[[9,5],[8,5]]]],
    [[[[8,8],[6,4]],[[0,2],[9,5]]],2],
    [[[[3,0],7],[9,2]],[[0,[8,6]],[[7,2],[8,5]]]],
    [[0,6],[1,[9,[4,3]]]],
    [[0,8],[[[5,0],6],[5,[2,0]]]],
    [[[[7,1],[0,3]],[[9,9],[3,5]]],[4,[8,4]]],
    [7,[[1,[3,7]],[[3,4],[2,3]]]],
    [[[[2,2],[4,8]],[[3,4],0]],[[[1,5],[2,8]],5]],
    [6,[[[9,1],5],[9,9]]],
    [[[2,[8,6]],[[9,9],[6,3]]],4],
    [[[[3,2],[9,3]],8],9],
    [[[[6,9],0],[[0,6],[1,3]]],[[5,[9,8]],[[1,5],[3,7]]]],
    [[2,[4,[2,3]]],[[[6,0],[7,2]],3]],
    [[[[8,3],4],[6,[8,8]]],4],
    [[[9,8],5],[[[4,4],[6,3]],[8,6]]],
    [9,2],
    [[[3,4],[4,[7,0]]],[0,[4,[6,9]]]],
    [[[0,8],[3,9]],[[[3,8],6],[[9,3],6]]],
    [[[[5,6],[0,3]],1],[8,[2,9]]],
    [[[[4,2],8],[[9,3],7]],0]
]

function recalculate(cur) {
    if (cur[0] instanceof Object) {
        cur[0].par = cur
        cur[0].type = "l"
        recalculate(cur[0])
    }

    if (cur[1] instanceof Object) {
        cur.isLeaf = false;

        cur[1].par = cur
        cur[1].type = "r"
        recalculate(cur[1])
    }
}

function findExplode(cur, depth=0) {
    if (depth == 4) {
       
        return cur
    }

    if (cur[0] instanceof Object) {
        let res = findExplode(cur[0], depth+1)
        if (res) return res
    }

    if (cur[1] instanceof Object) {
        let res = findExplode(cur[1], depth+1)
        if (res) return res
    }

    return null
}


function getVals(eq) {
    let vals = []

    function helper(cur) {
        if (!(cur[0] instanceof Object)) {
            vals.push({
                node: cur,
                left: true
            })
        } else {
            helper(cur[0])
        }

        if (!(cur[1] instanceof Object)) {
            vals.push({
                node: cur,
                left: false
            })
        } else {
            helper(cur[1])
        }
    }

    helper(eq)

    return vals
}

function findLeft(eq, target) {
    let vals = getVals(eq)

    for (let i = 0; i < vals.length; i++) {
        if (vals[i].node == target) {
            if (i == 0) return null
            return vals[i-1]
        }
    }

    return null
}

function findRight(eq, target) {
    let vals = getVals(eq)

    for (let i = vals.length-1; i >= 0; i--) {
        if (vals[i].node == target) {
            if (i == vals.length-1) return null
            return vals[i+1]
        }
    }

    return null
}

function explode(eq) {
    let cur = findExplode(eq)
    if (!cur) return false

    let left = findLeft(eq, cur)
    if (left) {
        if (left.left) left.node[0] += cur[0]
        else left.node[1] += cur[0]
        
    }

    let right = findRight(eq, cur)
    if (right) {
        if (right.left) right.node[0] += cur[1]
        else right.node[1] += cur[1]
    }

    let parent = cur.par;
    if (cur.type == "l") parent[0] = 0;
    else parent[1] = 0;

    return true
}

function split(eq) {
    function helper(cur) {
        for (let i = 0; i < 2; i++) {
            if (!(cur[i] instanceof Object)) {
                if (cur[i] >= 10) {
                    cur[i] = [ Math.floor(cur[i]/2), Math.ceil(cur[i]/2) ]
                    return true
                }
            } else {
                if (helper(cur[i])) return true
            }
        }

        return false
    }

    return helper(eq)
}

function print(eq) {
    let res = ""

    function helper(cur) {
        res += "["

        if (!(cur[0] instanceof Object)) res += cur[0]
        else helper(cur[0])

        res += ", "

        if (!(cur[1] instanceof Object)) res += cur[1]
        else helper(cur[1])

        res += "]"
    }

    helper(eq)
    console.log(res)
}

function simplify(eq) {
    while (true) {
        recalculate(eq)

        if (explode(eq)) continue
        else if (split(eq)) continue
        else break
    }
}

function magnitude(cur) {
    let l = (cur[0] instanceof Object) ? magnitude(cur[0]) : cur[0]
    let r = (cur[1] instanceof Object) ? magnitude(cur[1]) : cur[1]
    return 3 * l + 2 * r
}

function copy(o) {
    return JSON.parse(JSON.stringify(o));
}

let maxMagnitude = 0

for (let i = 0; i < data.length; i++) {
    for (let j = 0; j < data.length; j++) {
        if (i == j) continue;
        let eq = copy([ data[i], data[j] ])
        simplify(eq)
        maxMagnitude = Math.max(maxMagnitude, magnitude(eq))
    }
}

console.log(maxMagnitude)